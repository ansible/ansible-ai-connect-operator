---
# Determine and set WCA configuration secret
- name: Check for custom WCA configuration
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ wca.wca_secret_name }}'
  register: _custom_wca_config_resources
  when:
    - wca is defined
    - wca | length
    - wca.wca_secret_name is defined
    - wca.wca_secret_name | length
  no_log: "{{ no_log }}"

- name: Check for existing WCA configuration
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ ansible_operator_meta.name }}-wca-configuration'
  register: _existing_wca_config_resources
  no_log: "{{ no_log }}"

- name: Set WCA configuration based on if user secret exists
  set_fact:
    _wca_config: '{{ _custom_wca_config_resources["resources"] | default([]) | length | ternary(_custom_wca_config_resources, _existing_wca_config_resources) }}'
  no_log: "{{ no_log }}"

- block:
    - name: Create WCA configuration
      k8s:
        apply: true
        definition: "{{ lookup('template', 'secrets/wca.secret.yaml.j2') }}"
      no_log: "{{ no_log }}"

    - name: Read WCA Configuration
      k8s_info:
        kind: Secret
        namespace: '{{ ansible_operator_meta.namespace }}'
        name: '{{ ansible_operator_meta.name }}-wca-configuration'
      register: _generated_wca_config_resources
      no_log: "{{ no_log }}"
  when: not _wca_config['resources'] | default([]) | length

- name: Set WCA Configuration
  set_fact:
    wca_config: '{{ _generated_wca_config_resources["resources"] | default([]) | length | ternary(_generated_wca_config_resources, _wca_config) }}'
  no_log: "{{ no_log }}"

- name: Set actual WCA configuration secret used
  set_fact:
    __wca_secret_name: "{{ wca_config['resources'][0]['metadata']['name'] }}"
