---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{ lookup("template", "../common/templates/labels/common.yaml.j2")  | indent(width=4) | trim }}
    {{ lookup("template", "../common/templates/labels/version.yaml.j2") | indent(width=4) | trim }}
    app.kubernetes.io/component: '{{ deployment_type }}-chatbot-api'
  name: '{{ ansible_operator_meta.name }}-chatbot-api'
  namespace: '{{ ansible_operator_meta.namespace }}'
spec:
  replicas: {{ combined_chatbot_api.replicas }}
{% if combined_chatbot_api.strategy is defined %}
  strategy:
    type: {{ combined_chatbot_api.strategy.type }}
{% if combined_chatbot_api.strategy.type == "Recreate" %}
    rollingUpdate: null
{% elif combined_chatbot_api.strategy.type == "RollingUpdate" %}
    rollingUpdate:
      maxSurge:  {{ combined_chatbot_api.strategy.rollingUpdate.maxSurge | default("25%")}}
      maxUnavailable: {{ combined_chatbot_api.strategy.rollingUpdate.maxUnavailable | default("25%")}}
{% endif %}
{% endif %}
  selector:
    matchLabels:
      app.kubernetes.io/name: '{{ ansible_operator_meta.name }}'
      app.kubernetes.io/managed-by: '{{ deployment_type }}-operator'
      app.kubernetes.io/component: '{{ deployment_type }}-chatbot-api'
  template:
    metadata:
      labels:
        {{ lookup("template", "../common/templates/labels/common.yaml.j2")  | indent(width=8) | trim }}
        {{ lookup("template", "../common/templates/labels/version.yaml.j2") | indent(width=8) | trim }}
        app.kubernetes.io/component: '{{ deployment_type }}-chatbot-api'
      annotations:
        kubectl.kubernetes.io/default-container: 'ansible-chatbot'
        checksum-chatbot.configmap: "{{ lookup('template', 'chatbot.configmap.yaml.j2') | sha1 }}"
        checksum-secret-chatbot_config: "{{ lookup('ansible.builtin.vars', 'chatbot_config', default='')["resources"][0]["data"] | default('') | sha1 }}"
    spec:
      serviceAccountName: '{{ ansible_operator_meta.name }}'
{% if image_pull_secrets | length > 0 %}
      imagePullSecrets:
{% for secret in image_pull_secrets %}
        - name: {{ secret }}
{% endfor %}
{% endif %}
{% if combined_chatbot_api.node_selector is defined %}
      nodeSelector:
        {{ combined_chatbot_api.node_selector | indent(width=8) }}
{% endif %}
{% if combined_chatbot_api.tolerations is defined %}
      tolerations:
        {{ combined_chatbot_api.tolerations | indent(width=8) }}
{% endif %}
{% if combined_chatbot_api.topology_spread_constraints is defined %}
      topologySpreadConstraints:
        {{ combined_chatbot_api.topology_spread_constraints | indent(width=8) }}
{% endif %}
      initContainers:
{% if bundle_ca_crt  %}
      - name: configure-bundle-ca-cert
        image: {{ _chatbot_image }}
        imagePullPolicy: '{{ image_pull_policy }}'
        command:
          - /bin/sh
          - -c
          - |
            mkdir -p /etc/pki/ca-trust/extracted/{java,pem,openssl,edk2}
            update-ca-trust
{% if combined_chatbot_api.resource_requirements is defined %}
        resources: {{ combined_chatbot_api.resource_requirements }}
{% endif %}
        volumeMounts:
          - name: "ca-trust-extracted"
            mountPath: "/etc/pki/ca-trust/extracted"
          - name: "{{ ansible_operator_meta.name }}-bundle-cacert"
            mountPath: /etc/pki/ca-trust/source/anchors/bundle-ca.crt
            subPath: bundle-ca.crt
            readOnly: true
{% endif %}
      containers:
      - name: ansible-chatbot
        image: {{ _chatbot_image }}
        imagePullPolicy: '{{ image_pull_policy }}'
        env:
          - name: RCS_CONFIG_FILE
            value: /app-root/aapconfig.yaml
          - name: PROJECT
            value: aap
        volumeMounts:
          - name: aap-chatbot-config
            mountPath: /app-root/aapconfig.yaml
            subPath: aapconfig.yaml
{% if is_openshift %}
          - name: model-server-tls-certs
            mountPath: /var/run/secrets/kubernetes.io/serviceaccount/
{% endif %}
          - name: chatbot-token
            mountPath: /app-root/keys1/
{% if bundle_ca_crt %}
          - name: "ca-trust-extracted"
            mountPath: "/etc/pki/ca-trust/extracted"
          - name: "{{ ansible_operator_meta.name }}-bundle-cacert"
            mountPath: /etc/pki/ca-trust/source/anchors/bundle-ca.crt
            subPath: bundle-ca.crt
            readOnly: true
{% endif %}
        ports:
        - containerPort: 8080
          protocol: TCP
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
          seccompProfile:
            type: RuntimeDefault
{% if combined_chatbot_api.resource_requirements is defined %}
        resources: {{ combined_chatbot_api.resource_requirements }}
{% endif %}
      restartPolicy: Always
      volumes:
        - name: aap-chatbot-config
          configMap:
            name: '{{ ansible_operator_meta.name }}-{{ deployment_type }}-chatbot-env-properties'
{% if is_openshift %}
        - name: model-server-tls-certs
          configMap:
            items:
              - key: service-ca.crt
                path: service-ca.crt
            name: openshift-service-ca.crt
{% endif %}
        - name: chatbot-token
          secret:
            secretName: {{ chatbot_config_secret_name }}
            items:
              - key: chatbot_token
                path: chatbot-token.txt
{% if bundle_ca_crt %}
        - name: "ca-trust-extracted"
          emptyDir: {}
        - name: "{{ ansible_operator_meta.name }}-bundle-cacert"
          secret:
            secretName: "{{ bundle_cacert_secret }}"
            items:
              - key: bundle-ca.crt
                path: 'bundle-ca.crt'
{% endif %}
