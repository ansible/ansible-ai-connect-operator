---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{ lookup("template", "../common/templates/labels/common.yaml.j2")  | indent(width=4) | trim }}
    {{ lookup("template", "../common/templates/labels/version.yaml.j2") | indent(width=4) | trim }}
    app.kubernetes.io/component: '{{ deployment_type }}-chatbot-api'
  name: '{{ ansible_operator_meta.name }}-chatbot-api'
  namespace: '{{ ansible_operator_meta.namespace }}'
spec:
  replicas: {{ combined_chatbot_api.replicas }}
{% if combined_chatbot_api.strategy is defined %}
  strategy:
    type: {{ combined_chatbot_api.strategy.type }}
{% if combined_chatbot_api.strategy.type == "Recreate" %}
    rollingUpdate: null
{% elif combined_chatbot_api.strategy.type == "RollingUpdate" %}
    rollingUpdate:
      maxSurge:  {{ combined_chatbot_api.strategy.rollingUpdate.maxSurge | default("25%")}}
      maxUnavailable: {{ combined_chatbot_api.strategy.rollingUpdate.maxUnavailable | default("25%")}}
{% endif %}
{% endif %}
  selector:
    matchLabels:
      app.kubernetes.io/name: '{{ ansible_operator_meta.name }}'
      app.kubernetes.io/managed-by: '{{ deployment_type }}-operator'
      app.kubernetes.io/component: '{{ deployment_type }}-chatbot-api'
  template:
    metadata:
      labels:
        {{ lookup("template", "../common/templates/labels/common.yaml.j2")  | indent(width=8) | trim }}
        {{ lookup("template", "../common/templates/labels/version.yaml.j2") | indent(width=8) | trim }}
        app.kubernetes.io/component: '{{ deployment_type }}-chatbot-api'
      annotations:
        kubectl.kubernetes.io/default-container: 'ansible-chatbot'
        checksum-configmap-chatbot-lightspeed-stack-config: "{{ lookup('template', 'chatbot.configmap_lightspeed_stack_config.yaml.j2') | sha1 }}"
        checksum-configmap-chatbot-llama-stack-config: "{{ lookup('template', 'chatbot.configmap_llama_stack_config.yaml.j2') | sha1 }}"
        checksum-configmap-chatbot-system-prompt: "{{ lookup('template', 'chatbot.configmap_system_prompt.yaml.j2') | sha1 }}"
        checksum-secret-chatbot_config: "{{ lookup('ansible.builtin.vars', 'chatbot_config', default='')["resources"][0]["data"] | default('') | sha1 }}"
    spec:
      serviceAccountName: '{{ ansible_operator_meta.name }}'
      # Pod-level security context (OpenShift SCC compatible)
      securityContext:
        runAsNonRoot: true              # Enforce non-root execution
        seccompProfile:
          type: RuntimeDefault          # Secure computing mode
{% if image_pull_secrets | length > 0 %}
      imagePullSecrets:
{% for secret in image_pull_secrets %}
        - name: {{ secret }}
{% endfor %}
{% endif %}
{% if combined_chatbot_api.node_selector is defined %}
      nodeSelector:
        {{ combined_chatbot_api.node_selector | indent(width=8) }}
{% endif %}
{% if combined_chatbot_api.tolerations is defined %}
      tolerations:
        {{ combined_chatbot_api.tolerations | indent(width=8) }}
{% endif %}
{% if combined_chatbot_api.topology_spread_constraints is defined %}
      topologySpreadConstraints:
        {{ combined_chatbot_api.topology_spread_constraints | indent(width=8) }}
{% endif %}
      initContainers:
{% if bundle_ca_crt  %}
      - name: configure-bundle-ca-cert
        image: {{ _chatbot_image }}
        imagePullPolicy: '{{ image_pull_policy }}'
        command:
          - /bin/sh
          - -c
          - |
            mkdir -p /etc/pki/ca-trust/extracted/{java,pem,openssl,edk2}
            update-ca-trust extract --output /etc/pki/ca-trust/extracted
{% if combined_chatbot_api.resource_requirements is defined %}
        resources: {{ combined_chatbot_api.resource_requirements }}
{% endif %}
        volumeMounts:
          - name: "ca-trust-extracted"
            mountPath: "/etc/pki/ca-trust/extracted"
          - name: "{{ ansible_operator_meta.name }}-bundle-cacert"
            mountPath: /etc/pki/ca-trust/source/anchors/bundle-ca.crt
            subPath: bundle-ca.crt
            readOnly: true
{% endif %}
      - name: init-rag-vector-db
        image: {{ _chatbot_rag_db_image }}
        env:
          - name: LLAMA_STACK_CONFIG_DIR
            value: /.llama/data
        volumeMounts:
          - name: ansible-chatbot-storage
            mountPath: /.llama/data
        command:
          - /rag/entrypoint.sh
      containers:
      - name: ansible-chatbot
        image: {{ _chatbot_image }}
        imagePullPolicy: '{{ image_pull_policy }}'
        env:
          - name: LLAMA_STACK_CONFIG_DIR
            value: /.llama/data
          - name: EMBEDDING_MODEL
            value: ./embeddings_model
          - name: VLLM_URL
            value: {{ chatbot_url }}
          - name: VLLM_API_TOKEN
            value: {{ chatbot_token }}
          - name: INFERENCE_MODEL
            value: {{ chatbot_model }}
        ports:
          - containerPort: 8321
            protocol: TCP
        volumeMounts:
          - name: ansible-chatbot-storage
            mountPath: /.llama/data
          - name: ansible-chatbot-lightspeed-stack-config
            mountPath: /.llama/distributions/ansible-chatbot/config
          - name: ansible-chatbot-llama-stack-config
            mountPath: /.llama/distributions/llama-stack/config
          - name: ansible-chatbot-system-prompt
            mountPath: /.llama/distributions/ansible-chatbot/system-prompts
{% if is_openshift %}
          - name: lm-stack-tls-certs
            mountPath: /app-root/certs/
            readOnly: true
{% endif %}
{% if is_openshift %}
          - name: server-tls-certs
            mountPath: /var/run/secrets/kubernetes.io/serviceaccount/
{% endif %}
{% if bundle_ca_crt %}
          - name: "ca-trust-extracted"
            mountPath: "/etc/pki/ca-trust/extracted"
          - name: "{{ ansible_operator_meta.name }}-bundle-cacert"
            mountPath: /etc/pki/ca-trust/source/anchors/bundle-ca.crt
            subPath: bundle-ca.crt
            readOnly: true
{% endif %}
{# - Need to get ansible-chatbot-stack to run as non-root
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
          seccompProfile:
            type: RuntimeDefault
#}
{% if combined_chatbot_api.resource_requirements is defined %}
        resources: {{ combined_chatbot_api.resource_requirements }}
{% endif %}
{% if _aap_gateway_url is defined and _aap_controller_url is defined %}
      - name: ansible-mcp-controller
        image: {{ _chatbot_mcp_controller_image }}
        imagePullPolicy: '{{ image_pull_policy }}'
        env:
          - name: HOST
            value: 0.0.0.0
          - name: PORT
            value: '8004'
          - name: AAP_GATEWAY_URL
            value: {{ _aap_gateway_url }}
          - name: AAP_SERVICE_URL
            value: {{ _aap_controller_url }}
        ports:
          - containerPort: 8004
            protocol: TCP
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
          seccompProfile:
            type: RuntimeDefault
{% if is_openshift or bundle_ca_crt %}
        volumeMounts:
{% if is_openshift %}
          - name: server-tls-certs
            mountPath: /var/run/secrets/kubernetes.io/serviceaccount/
{% endif %}
{% if bundle_ca_crt %}
          - name: "ca-trust-extracted"
            mountPath: "/etc/pki/ca-trust/extracted"
          - name: "{{ ansible_operator_meta.name }}-bundle-cacert"
            mountPath: /etc/pki/ca-trust/source/anchors/bundle-ca.crt
            subPath: bundle-ca.crt
            readOnly: true
{% endif %}
{% endif %}
{% endif %}
{% if _aap_gateway_url is defined %}
      - name: ansible-mcp-lightspeed
        image: {{ _chatbot_mcp_lightspeed_image }}
        imagePullPolicy: '{{ image_pull_policy }}'
        env:
          - name: HOST
            value: 0.0.0.0
          - name: PORT
            value: '8005'
          - name: AAP_GATEWAY_URL
            value: {{ _aap_gateway_url }}
          - name: AAP_SERVICE_URL
            value: {{ _aap_lightspeed_url }}
        ports:
          - containerPort: 8005
            protocol: TCP
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
          seccompProfile:
            type: RuntimeDefault
{% if is_openshift or bundle_ca_crt %}
        volumeMounts:
{% if is_openshift %}
          - name: server-tls-certs
            mountPath: /var/run/secrets/kubernetes.io/serviceaccount/
{% endif %}
{% if bundle_ca_crt %}
          - name: "ca-trust-extracted"
            mountPath: "/etc/pki/ca-trust/extracted"
          - name: "{{ ansible_operator_meta.name }}-bundle-cacert"
            mountPath: /etc/pki/ca-trust/source/anchors/bundle-ca.crt
            subPath: bundle-ca.crt
            readOnly: true
{% endif %}
{% endif %}
{% endif %}
{% if is_openshift and enable_http_backward_compatibility %}
      - name: http-redirect
        image:  nginx:1.29.1-alpine-slim
        imagePullPolicy: '{{ image_pull_policy }}'
        ports:
          - containerPort: 8080
            protocol: TCP
        volumeMounts:
          - name: nginx-redirect-config
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
            readOnly: true
          - name: nginx-temp
            mountPath: /tmp
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
          seccompProfile:
            type: RuntimeDefault
          procMount: "Default"           # Restrict /proc filesystem access
        command: ["nginx", "-g", "daemon off;"]
        # Optimized resource allocation for redirect sidecar
        resources:
          requests:
            memory: "16Mi"
            cpu: "10m"
          limits:
            memory: "32Mi"
            cpu: "50m"
{% endif %}
      restartPolicy: Always
      volumes:
        - name: ansible-chatbot-lightspeed-stack-config
          configMap:
            name: '{{ ansible_operator_meta.name }}-{{ deployment_type }}-lightspeed-stack-config'
            items:
              - key: lightspeed-stack.yaml
                path: lightspeed-stack.yaml
        - name: ansible-chatbot-llama-stack-config
          configMap:
            name: '{{ ansible_operator_meta.name }}-{{ deployment_type }}-llama-stack-config'
            items:
              - key: ansible-chatbot-run.yaml
                path: ansible-chatbot-run.yaml
        - name: ansible-chatbot-system-prompt
          configMap:
            name: '{{ ansible_operator_meta.name }}-{{ deployment_type }}-system-prompt'
            items:
              - key: DEFAULT_SYSTEM_PROMPT
                path: default.txt
{% if is_openshift %}
        - name: lm-stack-tls-certs
          secret:
            secretName: '{{ ansible_operator_meta.name }}-chatbot-api-tls'
            defaultMode: 0644
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
{% if enable_http_backward_compatibility %}
        - name: nginx-redirect-config
          configMap:
            name: '{{ ansible_operator_meta.name }}-nginx-redirect-config'
            items:
              - key: nginx.conf
                path: nginx.conf
        - name: nginx-temp
          emptyDir: {}
{% endif %}
{% endif %}
{% if is_openshift %}
        - name: server-tls-certs
          configMap:
            items:
              - key: service-ca.crt
                path: service-ca.crt
            name: openshift-service-ca.crt
{% endif %}
{% if bundle_ca_crt %}
        - name: "ca-trust-extracted"
          emptyDir: {}
        - name: "{{ ansible_operator_meta.name }}-bundle-cacert"
          secret:
            secretName: "{{ bundle_cacert_secret }}"
            items:
              - key: bundle-ca.crt
                path: 'bundle-ca.crt'
{% endif %}
